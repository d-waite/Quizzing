
<button @onclick="AddTeam">Add Team</button>
<button @onclick="RemoveTeam">Remove Team</button>

@if (showForm)
{
	<DropDowns @rendermode="InteractiveServer" QuestionNum="@questionNumStr" Questions="@questions"/>
}

<p>@scoreUpdated</p>

<div class="d-flex pt-3">
	<table border="1">
		<thead>
			<tr>
				<th>Teams</th>
				@for (int i = 1; i <= 50; i++)
				{
					int currentNum = i;
					<td><button class="fw-bold" @onclick="() => ChooseQuestion(currentNum)">@i</button></td>
				}
				<th>Score</th>
			</tr>
		</thead>
		<tbody>
		@foreach (QuizzingTeam team in teams)
		{
			<tr>
				<th>@team.Name</th>
				@for (int i = 1; i <= 50; i++)
				{
					int currentNum = i;
					
					<Cell Questions="@questions" Team="@team" CellNum="@currentNum" onScoreChange="HandleStateChange"/>
					
				}
					<th>@team.Score</th>
			</tr>
		}
		</tbody>
	</table>
</div>

@code {
	private List<QuizzingTeam> teams = new List<QuizzingTeam>();
	private List<Question> questions = new List<Question>();
	private bool showForm = false;
	private string questionNumStr;
	private string scoreUpdated = "no";

	protected override void OnInitialized()
	{
		for (int i = 0; i < 50; i++)
		{
			questions.Add(new Question());
		}
	}

	void AddTeam()
	{
		teams.Add(new QuizzingTeam());
		teams[teams.Count - 1].Name = $"Team {teams.Count}";

		StateHasChanged();
	}

	void RemoveTeam()
	{
		if (teams.Count > 0)
		{
			teams.Remove(teams[teams.Count - 1]);
			StateHasChanged();
		}
	}

	void ChooseQuestion(int number)
	{
		showForm = true;
		questionNumStr = number.ToString();
	}

	void HandleStateChange(string updated)
	{
		scoreUpdated = updated;
		StateHasChanged();
	}
}
